"""
This document defines the three classes for function secret sharing in distributed interval comparison functions (DICF)
in the context of secure multi-party computation, which respectively correspond to class DICFKey, GrottoDICFKey and SigmaDICFKey.
The keys generated by these classes are used to securely evaluate DICF between parties.

    .. note::
        Distributed interval comparison function:
            f(x)=1, if  down_bound <= x <= upper_bound; f(x)=0, else

"""

#  This file is part of the NssMPClib project.
#  Copyright (c) 2024 XDU NSS lab,
#  Licensed under the MIT license. See LICENSE in the project root for license information.

from NssMPC import RingTensor, ArithmeticSecretSharing
from NssMPC.config import HALF_RING, DEVICE, BIT_LEN
from NssMPC.crypto.aux_parameter import Parameter
from NssMPC.crypto.aux_parameter.function_secret_sharing_keys.dcf_key import DCFKey
from NssMPC.crypto.aux_parameter.function_secret_sharing_keys.dpf_key import DPFKey


class UnauthSharkDReLUKey(Parameter):
    """
    The secret sharing key for distributed interval comparison function (DICF) with the method adapted from `Sigma <https://eprint.iacr.org/2023/1269>`_.

    This class implements the secret sharing keys required for function secret sharing (FSS) in
    distributed interval comparison functions (DICF).
    The generation of the SigmaDICF key is based on the DPF key.
    It also includes methods for generating other key parameters like c and r_in used in the SigmaDICF protocol.


    ATTRIBUTES:
        * **dpf_key**: The key of SigmaDICF.
        * **c**: The parameter for offline support.
        * **r_in**: The offset of the function, for the purpose of blind the input.
    """

    def __init__(self):
        """
        Initialize the SigmaDICFKey object.

        This method initializes the key `dpf_key` to *DPFKey* object, the MSB of offset `c` to *None*,
        and the offset `r_in` to *None*.
        """
        self.dcf_key = None
        self.r_in = None
        self.one_bss = None

    @staticmethod
    def gen(x_0:ArithmeticSecretSharing, bit_len=BIT_LEN):
        """
        Generate SigmaDICF keys.

        This method generates the DICF keys required for secure comparison with method adapted from Sigma.

        :param num_of_keys: The number of keys to generate.
        :type num_of_keys: int
        :param bit_len: The length of the binary bits of the offset `r_in`.
        :type bit_len: int
        :return: A tuple containing two SigmaDICFKey objects for the two parties.
        :rtype: Tuple[SigmaDICFKey, SigmaDICFKey]
        """
        k0 = UnauthSharkDReLUKey()
        k1 = UnauthSharkDReLUKey()
        #TODO Delete useless r_in
        k0.r_in,k1.r_in = ArithmeticSecretSharing.share(RingTensor.random([1]),2)
        k0.dcf_key, k1.dcf_key = DCFKey.gen(x_0.numel(),x_0.ring_tensor,RingTensor(1))
        k0.one_bss = 0
        k1.one_bss = 1
        return k0, k1
